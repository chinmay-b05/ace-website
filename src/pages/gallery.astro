---
import GalleryHero from '@components/GalleryHero.astro';
import Layout from '@layouts/Layout.astro';
import { getImages } from '../lib/cloudinary';

function shuffleArray(array: string[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

let { images: rimages, nextCursor } = await getImages('gallery');

 const images = shuffleArray(rimages);


---

<Layout title="ACE">
  <main>
    <template id="image-template">
      <img src="" alt="" class="gallery-image mb-4 rounded-lg w-full image" />
    </template>

    <div class="md:hidden mt-32 flex flex-col gap-8 items-center">
      <h1 class="fade-up uppercase text-6xl mx-auto max-w-screen-lg font-dirtyline">Gallery</h1>
      <p class="fade-up text-gray-200 font-syne-variable">Opening the memory window..</p>
    </div>
    <div class="hidden md:block">
      <GalleryHero />
    </div>
    <br />
    <br />
    <section class="content-container masonry-grid w-full h-fit" id="images-container" data-next-cursor={nextCursor}>
      {
        images.length ? (
          images.map((image) => <img src={image} alt="" class="gallery-image mb-4 rounded-lg w-full image" />)
        ) : (
          <p>No Images</p>
        )
      }
    </section>
  </main>
</Layout>

<style>
  .masonry-grid {
    column-count: 1;
    column-gap: 1rem;
  }

  .gallery-image {
    width: 100%;
    break-inside: avoid;
    margin-bottom: 1rem;
    border-radius: 0.5rem;
    object-fit: cover;
  }

  /* Adjusting column counts for different screen sizes */
  @media (min-width: 640px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (min-width: 768px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 4;
    }
  }
</style>

<script>
  import gsap from 'gsap';
  import ScrollTrigger from 'gsap/ScrollTrigger';
  import { toast } from 'sonner';
  gsap.registerPlugin(ScrollTrigger);

  const images = gsap.utils.toArray<HTMLImageElement>('.gallery-image');

  images.forEach((element) => {
    gsap.fromTo(
      element,
      {
        filter: 'blur(10px)',
        scale: 0.95,
      },
      {
        duration: 0.5,
        scale: 1.0,
        filter: 'blur(0px)',
        scrollTrigger: {
          start: 'top 70%',
          trigger: element,
          toggleActions: 'restart none none none',
        },
      }
    );
  });

  type ImageDetail = {
    nextCursor: string;
    images: string[];
  };

  const template = document.querySelector<HTMLTemplateElement>('#image-template');
  const imagesContainer = document.querySelector<HTMLDivElement>('#images-container')!;
  let image = document.querySelector('.image:last-of-type');
  let nextCursor = imagesContainer.dataset.nextCursor;

  const addImages = (imageDetail: ImageDetail) => {
    if (!template) return;

    imageDetail.images.forEach((image) => {
      const clone = template.content.cloneNode(true);
      //@ts-ignore
      const img: HTMLImageElement = clone.querySelector('img');
      img.src = image;

      imagesContainer.appendChild(clone);
    });

    nextCursor = imageDetail.nextCursor;
    if (nextCursor) {
      image = document.querySelector('.image:last-of-type');
      image && observer.observe(image);
    }
  };

  const fetchImages = async (): Promise<void> => {
    try {
      const response = await fetch('/api/gallery', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          nextCursor,
        }),
      });
      if (!response.ok) {
        toast.error('couldnot able to fetch images');
      }

      const data: ImageDetail = await response.json();
      addImages(data);
    } catch (err) {
      toast.error(String(err));
    }
  };

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          observer.unobserve(entry.target);
          fetchImages();
        }
      });
    },
    {
      threshold: 0.1,
    }
  );

  nextCursor && image && observer.observe(image);
</script>
