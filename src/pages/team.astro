---
import Layout from '@layouts/Layout.astro';
import { teamMembers } from '@lib/constants';
import { Image } from 'astro:assets';
import sample from '../assets/images/sample.png';

const images: { [index: string]: ImageMetadata } = {};
await Astro.glob('/src/assets/images/team/**/*.webp').then((files) => {
  files.forEach((file) => {
    const name = file.default.src.split('.')[0].split('/').pop();
    images[name] = file.default;
  });
});
//for 2024 i just statically imported sample
images['sample'] = sample;
---

<Layout>
  <main>
    <section class="content-container tabs mt-28">
      <ul class="text-xs flex gap-4 flex-wrap items-center">
        {
          Object.keys(teamMembers).map((tabName) => {
            const displayString = tabName === 'faculty' ? 'Faculty' : `${tabName}-${Number(tabName) + 1}`;
            return (
              <li>
                <input
                  class="input"
                  name="tabs"
                  type="radio"
                  id={`tab-${tabName}`}
                  value={tabName}
                  checked={tabName === 'faculty'}
                />
                <label class="" for={`tab-${tabName}`}>
                  {displayString}
                </label>
              </li>
            );
          })
        }
      </ul>

      <div class="panel-container w-full">
        {
          Object.entries(teamMembers).map(([tabName, members]) => (
            <div
              class=" gap-8 grid  w-fit mx-auto md:grid-cols-2 lg:grid-cols-3 panel justify-items-center"
              data-tabname={tabName}
            >
              {members.map((member) => (
                <div class="card  w-[300px] grid grid-rows-10 rounded-2xl  h-max gap-2">
                  <div class="row-span-6 row-start-1 grid place-content-center p-12 pb-0">
                    <Image
                      src={images[member.image]}
                      alt={member.name}
                      loading="lazy"
                      class="w-[200px] aspect-square rounded-full object-cover object-center"
                      style={{ objectPosition: 'top' }}
                      width={300}
                      height={300}
                    />
                  </div>

                  <div class="content w-full row-start-7 row-span-4">
                    <h3 class="uppercase font-bold text-lg">{member.name}</h3>
                    <span>{member.position}</span>
                  </div>
                </div>
              ))}
            </div>
          ))
        }
      </div>
    </section>
  </main>
</Layout>

<style>
  /* Tabs Navigation */
  .tabs {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    margin-top: 100px;
    align-items: center;
  }

  .tabs input[type='radio'] {
    display: none;
  }

  .tabs ul {
    display: flex;
    justify-content: center;
    gap: 20px;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tabs ul li {
    flex: none;
  }

  .tabs ul li label {
    display: block;
    padding: 10px 15px;
    text-align: center;
    cursor: pointer;
    color: rgb(233, 227, 227);
    font-size: 24px;
    background: none;
    border: none;
    position: relative;
    overflow: hidden;
    transition:
      color 0.3s,
      font-weight 0.3s;
  }

  .tabs ul li label::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(to right, #00f, rgb(46, 144, 235));
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s ease-out;
    border-radius: 0 0 5px 5px;
  }

  .tabs ul li label:hover::after {
    transform: scaleX(1);
  }

  .tabs input[type='radio']:checked + label {
    color: #edf0f3;
    font-weight: bold;
  }

  .panel-container {
    width: 100%;
    margin-top: 20px;
  }

  .panel {
    display: none;
  }

  .show-panel {
    display: grid;
  }

  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card {
    background: linear-gradient(
      45deg,
      #64cfe243 40%,
      rgba(6, 100, 252, 0.414),
      rgba(6, 100, 252, 0.317) 60%,
      transparent
    );
    opacity: 0;
    background-size: 200% 200%;
    background-position: 100% 0;
    transition: background-position 0.4s ease-in-out;
  }

  .card.show {
    animation: fadeInUp 0.6s forwards;
  }

  .card.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .card .content {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    backdrop-filter: blur(15px);
    box-shadow: 0 -10px 10px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    text-align: center;
  }
</style>

<script>
  const radioButtons = document.querySelectorAll<HTMLInputElement>('input[name="tabs"]');
  const panels = document.querySelectorAll<HTMLDivElement>('.panel');

  function updatePanel(tabName: string) {
    panels.forEach((panel) => {
      if (panel.dataset.tabname === tabName) {
        panel.classList.add('show-panel');
      } else {
        panel.classList.remove('show-panel');
      }
    });
  }

  radioButtons.forEach((radio: any) => {
    radio.addEventListener('change', () => {
      if (radio.checked) {
        updatePanel(radio.value);
      }
    });
  });

  updatePanel('faculty');

  const cards = document.querySelectorAll('.card');

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('show');
        }
      });
    },
    {
      threshold: 0.1,
    }
  );

  cards.forEach((card) => {
    observer.observe(card);
  });
</script>
