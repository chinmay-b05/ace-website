---
import Layout from '@layouts/Layout.astro';
import BlogCard from '@components/BlogCard.astro';

import { db } from '@lib/db';
import { blogTable, userTable, viewTable } from '@lib/db/schema';
import { count, desc, eq, sql } from 'drizzle-orm';
import { getSession } from 'auth-astro/server';
import { SignIn } from 'auth-astro/components';

const blogs = await db
  .select({
    id: blogTable.id,
    image: blogTable.image,
    title: blogTable.title,
    description: blogTable.description,
    createdAt: blogTable.createdAt,
    authorId: blogTable.authorId,
    authorName: userTable.name,
    authorImage: userTable.image,
  })
  .from(blogTable)
  .innerJoin(userTable, eq(blogTable.authorId, userTable.id));

const topLikedBlogs = await db
  .select({
    id: blogTable.id,
    title: blogTable.title,
    likeCount: count(viewTable.liked).as('likeCount'),
  })
  .from(blogTable)
  .leftJoin(viewTable, sql`${blogTable.id} = ${viewTable.blogId}`)
  .groupBy(blogTable.id)
  .orderBy(desc(sql`likeCount`))
  .limit(3);

const session = await getSession(Astro.request);
---

<Layout title="ACE | blogs">
  <main class="content-container">
    <section class="mt-16 flex flex-col items-center">
      <div class="lg:py-18 py-12 sm:py-14 md:py-16 xl:py-20 flex flex-col items-center gap-6 text-center">
        <h1 class="fade-up uppercase text-6xl mx-auto max-w-screen-lg font-dirtyline">ACE BLOGS</h1>
        <p class="fade-up text-gray-200 font-syne-variable">
          Where creativity meets curiosity! click <a href="/blogs/new">here</a> to start writing
        </p>
      </div>

      <div class="flex lg:flex-row flex-col-reverse gap-11">
        <aside class="lg:w-56 xl:max-w-sm lg:sticky lg:top-14 h-fit">
          <div class="p-2 lg:p-4 xl:p-8 lg:border-b border-gray-700">
            <h2 class="text-2xl">Popular posts</h2>

            <ul class="mt-4 space-y-4 text-gray-400">
              {
                topLikedBlogs.map((blog) => (
                  <li>
                    <a href={`/blogs/${blog.id}`}>{blog.title}</a>
                  </li>
                ))
              }
            </ul>
          </div>
          <div class="lg:border-b border-gray-700 p-2 lg:p-4 xl:p-8">
            <h2 class="text-2xl">Want to contribute?</h2>
            <p class="mb-6 mt-4 text-gray-400">
              Start writing your blogs here and be a part of the vibrant ACE community!
            </p>

            {
              session?.user?.id ? (
                <a href="/blogs/new"> Write a blog ‚úçüèª</a>
              ) : (
                <SignIn provider="google">Write a blog ‚úçüèª</SignIn>
              )
            }
          </div>
        </aside>

        <div class="flex flex-col justify-start items-center gap-8 md:gap-16 max-w-xl pt-6 lg:pt-8 xl:pt-10 w-full">
          {blogs.map((blog) => <BlogCard blog={blog} />)}
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .fade-up {
    opacity: 0;
    transform: translateY(50px);
    animation: slideUp 1s ease-out forwards;
  }
</style>

<script>
  import gsap from 'gsap';
  import ScrollTrigger from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  const cards = gsap.utils.toArray<HTMLDivElement>('.blog-card');

  cards.forEach((element, _) => {
    gsap.set(element, { opacity: 0 });
    gsap.from(element, {
      y: 200,
      duration: 0.75,
      scrollTrigger: {
        trigger: element,
        start: 'top 100%',
      },
    });
  });

  ScrollTrigger.batch('.blog-card', {
    onEnter: (batch) => gsap.to(batch, { opacity: 1, y: 0, stagger: { each: 0.15, grid: [1, 1] }, overwrite: true }),
    onLeaveBack: (batch) => gsap.set(batch, { opacity: 0, y: 100, overwrite: true }),
  });

  ScrollTrigger.addEventListener('refreshInit', () => {
    gsap.set('.blog-card', { y: 0 });
  });
</script>
