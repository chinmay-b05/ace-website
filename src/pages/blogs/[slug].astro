---
import Layout from '@layouts/Layout.astro';
import { Icon } from 'astro-icon/components';
import { db } from '@lib/db';
import { and, count, eq } from 'drizzle-orm';
import { blogTable, userTable, viewTable } from '@lib/db/schema';
import { getSession } from 'auth-astro/server';
// import Comments from '@components/Comments';
import { SignIn } from 'auth-astro/components';
import ProtectedComponent from '@components/ProtectedComponent.astro';

const { slug } = Astro.params;

const session = await getSession(Astro.request);

const blogs = await db
  .select({
    id: blogTable.id,
    title: blogTable.title,
    content: blogTable.content,
    description: blogTable.description,
    createdAt: blogTable.createdAt,
    authorName: userTable.name,
    image: blogTable.image,
    authorId: blogTable.authorId,
    authorImage: userTable.image,
  })
  .from(blogTable)
  .innerJoin(userTable, eq(blogTable.authorId, userTable.id))
  .where(eq(blogTable.id, Number(slug)));

if (!blogs.length) return Astro.redirect('/blogs');

const blog = blogs[0];

if (session?.user?.id) {
  //create view if not exits
  await db
    .insert(viewTable)
    .values({
      userId: session.user.id,
      blogId: blog.id,
    })
    .onConflictDoNothing();
}

/************ fetch views count  **************/
let viewsResult = await db.select({ viewCount: count() }).from(viewTable).where(eq(viewTable.blogId, blog.id));

let viewCount;
if (viewsResult.length) {
  viewCount = viewsResult[0].viewCount;
}

/************ fetch likes  *******************/
const likesResult = await db
  .select({
    likeCount: count(),
  })
  .from(viewTable)
  .where(and(eq(viewTable.liked, true), eq(viewTable.blogId, blog.id)));

let likeCount;
if (likesResult.length) {
  likeCount = likesResult[0].likeCount;
}

let liked: boolean | null = false;
if (session?.user?.id) {
  const likedResult = await db
    .select({
      liked: viewTable.liked,
    })
    .from(viewTable)
    .where(and(eq(viewTable.liked, true), eq(viewTable.blogId, blog.id)));

  if (likedResult.length) {
    liked = likedResult[0].liked;
  }
}

//comments
// const comments = await db
//   .select({
//     content: commentsTable.content,
//     userName: userTable.name,
//     userId: userTable.id,
//     createdAt: commentsTable.createdAt,
//     userImage: userTable.image,
//   })
//   .from(commentsTable)
//   .innerJoin(userTable, eq(commentsTable.userId, userTable.id))
//   .where(eq(commentsTable.blogId, blog.id));
---

<Layout title={`ACE | ${blog.title}`}>
  <main class="content-container mt-24">
    <div class="mx-auto w-full max-w-screen-lg md:-mb-10 lg:-mb-12 xl:-mb-16">
      <img src={blog.image} alt="bg" class="min-h-[240px] w-full object-cover aspect-[16/7]" />
    </div>

    <div class="relative mx-auto max-w-4xl z-10 px-7">
      <div
        class="mx-auto space-y-4 md:space-y-12 max-w-full bg-[#13151a] py-8 md:px-4 lg:p-12 lg:py-16 xl:py-20 xl:px-16 flex flex-col justify-center items-center"
      >
        <section
          class="mx-auto w-full max-w-prose text-justify flex justify-center items-center flex-col space-y-6 overflow-hidden"
        >
          <time class="text-gray-300 text-2xl">
            {
              new Intl.DateTimeFormat('en-US', {
                dateStyle: 'medium',

                timeZone: 'Asia/Kolkata',
              }).format(new Date(blog.createdAt))
            }
          </time>

          <div class="w-full max-w-[80%]">
            <h1 class="text-4xl font-bold text-center text-wrap break-words">
              {blog.title}
            </h1>
          </div>

          <a href={`/profile/${blog.authorId}`} class="flex items-center gap-2 text-gray-300">
            <span>By</span>
            <div class="w-10 h-10 bg-gray-200 shrink-0 flex ring-primary rounded-full">
              <img src={blog.authorImage} class="object-cover w-full h-full rounded-full" width="600" height="600" />
            </div>
            {blog.authorName}
          </a>

          <p class="text-gray-200">
            {blog.description}
          </p>
        </section>

        <hr class="border-gray-700 w-full" />

        <div class="flex gap-8 items-center mr-auto p-5 md:p-0">
          <button class="text-center" id="likeButton" data-blogid={blog.id}>
            {
              session?.user?.id ? (
                <>
                  <Icon name="mdi:heart" size={20} class={`inline-block mr-2 ${liked ? 'liked' : ''}`} />
                  <span class="text-white" id="like-text">
                    {likeCount ?? 0}
                  </span>
                </>
              ) : (
                <SignIn provider="google">
                  <Icon name="mdi:heart" size={20} class={`inline-block mr-2 ${liked ? 'liked' : ''}`} />
                  <span class="text-white">{likeCount ?? 0}</span>
                </SignIn>
              )
            }

            <!-- <ProtectedComponent>
              <Icon name="mdi:heart" size={20} class={`inline-block mr-2 ${liked ? 'liked' : ''}`} />
              <span class="text-white">{likeCount ?? 0}</span>
            </ProtectedComponent> -->
          </button>
          <span class="text-center"
            ><Icon name="mdi:eye" size={20} class:list={'inline-block mr-2'} />{viewCount ?? 0}</span
          >
        </div>

        <hr class="border-gray-700 w-full" />

        <article
          class="min-w-full capitalize text-justify text-gray-400 leading-7 break-words max-w-[90%] mx-auto"
          set:html={blog.content}
        />

        <!-- <Comments blogId={blog.id.toString()} comments={comments} client:visible user={user} /> -->
      </div>
    </div>
  </main>
</Layout>

<style>
  .liked {
    @apply text-red-700;
  }
</style>

<script>
  import { actions } from 'astro:actions';

  const likeButton = document.querySelector<HTMLButtonElement>('#likeButton');
  const likeText = document.querySelector<HTMLButtonElement>('#like-text')!;

  likeButton?.addEventListener('click', async (e) => {
    e.preventDefault();
    const { data } = await actions.likeBlog({ blogId: likeButton.dataset.blogid! });

    if (data) {
      if (data.liked) {
        likeButton.classList.add('liked');
        likeText.textContent = String(Number(likeButton.textContent) + 1);
      } else {
        likeButton.classList.remove('liked');
        likeText.textContent = String(Number(likeButton.textContent) - 1);
      }
    }
  });
</script>
